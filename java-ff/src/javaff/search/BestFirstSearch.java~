import javaff.planning.State;
import javaff.planning.Filter;
import java.util.Comparator;
import java.util.TreeSet;
import java.util.Hashtable;

public class BestFirstSearch extends Search {

	protected Hashtable<Integer, State> closed;
	protected TreeSet<State> open;
	protected Filter filter = null;

	public BestFirstSearch(State s) {
		this(s, new HValueComparator());
	}

	public BestFirstSearch(State s, Comparator<State> c) {
		super(s);
		setComparator(c);

		closed = new Hashtable<Integer, State>();
		open = new TreeSet<State>(comp);
	}

	public void setFilter(Filter f) {
		filter = f;
	}

	public void updateOpen(State S) {
		open.addAll(S.getNextStates(filter.getActions(S)));
	}

	public State removeNext() {
		State S = open.first();
		open.remove(S);
		/*
		 * System.out.println("================================");
		 * S.getSolution().print(System.out);
		 * System.out.println("----Helpful Actions-------------");
		 * javaff.planning.TemporalMetricState ms =
		 * (javaff.planning.TemporalMetricState) S;
		 * System.out.println(ms.helpfulActions);
		 * System.out.println("----Relaxed Plan----------------");
		 * ms.RelaxedPlan.print(System.out);
		 */
		return S;
	}

	public boolean needToVisit(State s) {
		Integer Shash = new Integer(s.hashCode());
		State D = closed.get(Shash);

		if (closed.containsKey(Shash) && D.equals(s))
			return false;

		closed.put(Shash, s);
		return true;
	}

	public State search() {
		open.add(start);
		State s = null;
		while (!open.isEmpty()) {
			s = removeNext();
			if (needToVisit(s)) {
				++nodeCount;
				if (s.goalReached()) {
					return s;
				} else {
					updateOpen(s);
				}
			}

		}
		return null;
	}

}
